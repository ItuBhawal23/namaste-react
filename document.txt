import React from "react";
import ReactDOM from "react-dom/client";

// ! using Core React

const heading = React.createElement("h1", null, "Namaste React ðŸš€");

const root = ReactDOM.createRoot(document.getElementById("root"));

root.render(heading);

// ! Using JSX

const jsxHeading = <h1 className="heading">Namaste React by JSX ðŸš€</h1>;

// JSX ( transpiled before it reaches JS Engine) -> PARCEL -> Babel (JS compiler)
// jsxHeading(JSX) converted to React.createElement by Babel => ReactElement- JS object => HTML Element(rendered)

root.render(jsxHeading);

// ! React Component [ Everything in React is Component ]

// * Class Based Component - OLD
// * Functional Component - NEW - Just JS function that returns JSX

const ChildComponent = () => <h3>I am Child Component</h3>;

const HeaderComponent = () => {
  return (
    <div>
      <h1 className="header">Header Component as Functional Component ðŸš€</h1>
      {/*  Babel transpile the JSX returned by the React Component to React.createElement which is
      then converted to HTMLElement when rendered */}
      {/* Component Composition */}
      <ChildComponent />
      <ChildComponent></ChildComponent>
      {ChildComponent()}
    </div>
  );
};

root.render(<HeaderComponent />);



# Introducing React HOOKS

// PROBLEM WITH NORMAL JS VARIABLE

NORMAL JS VARIABLE - with NO super power to automatically sync UI with DATA (whenever changes)
let varName = [];

varName = varName.filter((res) => res.data.avgRating > 4.4);

NOTE: use this varName in JSX to render some UI. The UI will not get UPDATED when the data is filtered. 
    : To resolve this data <--> UI sync issue } HOOKS came in picture

// HOOKS 
// 1. useState()
// 2. useEffect()

// useState() - It is normal JS function that accepts a initial value as argument and returns a array which is the StateVariable.

// Without Array Destructuring ->
const arr = useState(initial stateValue) // passing initialVal is Optional?

const arr[0] = stateVariable -> initialValue is assigned to it
const arr[1] = setStateVariable - update method() that takes the updated/modified data as argument and UPDATES THE StateVariable.

Using Array Destructuring ->
const [stateVariable, setStateVariable] = useState()

// Local StateVariable (with super powers) React keep tracks of the State variable -> As soon as it changes/updates -> It re renders the component by comparing the old VirtualDOM ({}) with new Virtual DOM({}) [using the diffing algorithm] and then UPDATES the UI auto magically - This whole process is Reconciliation Algorithm (now known as React Fiber - from React16)


2. useEffect()

- It takes two args, cb() func & dependency array []
- cb() is called after the Component is rendered

- SYNTAX:
  useEffect(() => {}, []);


## Shimmer UI
-> Instead of showing Loader/Spinner/some text like Loading..., a skeleton or dummy fake UI can be displayed.
-> It provides a BETTER UX (user experience)
-> (MUST BE FOLLOWED) YT, SWIGGY, ZOMATO or all big app follows it.